openapi: 3.0.0
info:
  version: "2.1.0"
  title: "LOCKSS Repository Service REST API"
  contact:
    name: "LOCKSS Support"
    url: "https://www.lockss.org/"
    email: "lockss-support@lockss.org"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"
servers:
  - url: https://laaws.lockss.org:24620/
paths:

  /collections:
    get:
      summary: "Gets an array of collection IDs in the repository"
      operationId: getCollections
      tags:
        - collections
      responses:
        200:
          description: "An array of collection IDs"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{collectionId}/artifacts:
    get:
      summary: "Returns committed artifacts in a collection"
      operationId: getArtifactsFromAllAus
      tags:
        - collections
      parameters:
#        - name: collectionId
#          in: path
#          description: "Collection ID of artifacts to return"
#          required: true
#          schema:
#            type: string
        - name: url
          in: query
          description: "URL of artifacts to return"
          required: false
          schema:
            type: string
        - name: urlPrefix
          in: query
          description: "URL prefix of artifacts to return"
          required: false
          schema:
            type: string
        - name: versions
          in: query
          description: "Version of the artifacts to return"
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: "Maximum number of artifacts per page"
          required: false
          schema:
            type: integer
        - name: continuationToken
          in: query
          description: "Continuation token for the next page of artifacts"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Page array of artifacts"
          headers:
            x-next:
              description: "A link to the next page of artifacts"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "Collection not found"
        502:
          description: "Could not read from external resource"
    post:
      summary: "Create an artifact"
      operationId: createArtifact
      tags:
        - collections
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                auid:
                  type: string
                uri:
                  type: string
                collectionDate:
                  type: integer
                  format: int64
                artifact:
                  type: string
                  format: binary
              required:
                - auid
                - uri
      responses:
        200:
          description: "Artifact created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artifact"
    parameters:
        - name: collectionId
          in: path
          description: "Collection ID of artifacts to return"
          required: true
          schema:
            type: string
  /collections/{collectionid}/artifacts/{artifactid}:
    get:
      summary: "Get artifact content and metadata"
      operationId: getArtifact
      tags:
        - collections
      parameters:
        - name: "includeContent"
          in: "query"
          description: "Controls whether to include the artifact content part in multipart response"
          required: false
          schema:
            type: "string"
            enum: ["NEVER", "IF_SMALL", "ALWAYS"]
            default: "ALWAYS"
      responses:
        200:
          description: "Artifact created"
          content:
#            multipart/form-data:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtifactData"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve artifact"
        404:
          description: "Artifact not found"
        502:
          description: "Could not read from external resource"
    put:
      summary: "Update the committed property of an artifact"
      operationId: updateArtifact
      tags:
        - collections
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                committed:
                  description: "New commit status of artifact"
                  type: boolean
              required:
                - committed
      responses:
        200:
          description: "Artifact updated"
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/Artifact"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to update artifact"
        404:
          description: "Artifact not found"
    delete:
      tags:
        - collections
      summary: "Remove an artifact from the repository"
      operationId: deleteArtifact
      responses:
        200:
          description: "Successfully removed artifact"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to delete artifact"
        404:
          description: "Artifact not found"
        409:
          description: "Cannot delete committed artifact"
    parameters:
      - name: "collectionid"
        description: "Collection containing the artifact"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "artifactid"
        description: "Identifier of the artifact"
        in: "path"
        required: true
        schema:
          type: "string"
  /collections/{collectionid}/aus:
    get:
      tags:
        - collections
      summary: "Get Archival Unit IDs (AUIDs) in a collection"
      description: "Get a list of all Archival Unit identifiers in a collection\
         \ or a pageful of the list defined by the continuation token and size"
      operationId: getAus
      responses:
        200:
          description: "The requested Archival Unit identifiers"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuidPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "Collection not found"
        502:
          description: "Could not read from external resource"
      parameters:
        - name: "collectionid"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Identifier of the collection containing the Archival\
             \ Units"
        - name: "limit"
          in: "query"
          description: "The requested maximum number of Archival Unit\
             \ identifiers per response"
          required: false
          schema:
            type: "integer"
        - name: "continuationToken"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "The continuation token of the next page of Archival\
             \ Unit identifiers to be returned"
  /collections/{collectionid}/aus/{auid}/artifacts:
    get:
      tags:
        - collections
      summary: "Get artifacts in a collection and Archival Unit"
      description: "Get a list of all artifacts in a collection and Archival\
         \ Unit or a pageful of the list defined by the continuation token and\
         \ size"
      operationId: getArtifacts
      responses:
        200:
          description: "The requested artifacts"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "Collection not found"
        502:
          description: "Could not read from external resource"
      parameters:
        - name: "collectionid"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Identifier of the collection containing the artifacts"
        - name: "auid"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Identifier of the Archival Unit containing the\
             \ artifacts"
        - name: "url"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "The URL contained by the artifacts"
        - name: "urlPrefix"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "The prefix to be matched by the artifact URLs"
        - name: "version"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "The version of the artifact"
        - name: "includeUncommitted"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Indication of whether uncommitted artifacts should be\
             \ returned"
        - name: "limit"
          in: "query"
          description: "The requested maximum number of artifacts per response"
          required: false
          schema:
            type: "integer"
        - name: "continuationToken"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "The continuation token of the next page of artifacts to\
             \ be returned"
  /collections/{collectionid}/aus/{auid}/size:
    get:
      tags:
        - collections
      summary: "Get the size of Archival Unit artifacts in a collection"
      operationId: getArtifactsSize
      responses:
        200:
          description: "Returns an AuSize containing the sizes of all the artifacts, only the latest artifact \
           version of all URLs, and the sum of the size of all the underlying WARC files, of an AU."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuSize"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "Collection not found"
        502:
          description: "Could not read from external resource"
    parameters:
      - name: "collectionid"
        in: "path"
        required: true
        schema:
          type: "string"
        description: "Identifier of the collection containing the artifacts"
      - name: "auid"
        in: "path"
        required: true
        schema:
          type: "string"
        description: "Identifier of the Archival Unit containing the artifacts"
  /status:
    get:
      summary: "Get the status of the service"
      description: "Get the status of the service"
      operationId: getStatus
      tags:
        - status
      responses:
        200:
          description: "The status of the service"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiStatus"
        401:
          description: "Unauthorized"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /cdx/owb/{collectionid}:
    get:
      summary: "Get OpenWayback CDX records"
      description: "Get the OpenWayback CDX records of a URL in a collection"
      operationId: getCdxOwb
      tags:
        - wayback
      parameters:
        - name: 'collectionid'
          in: path
          description: Identifier of the collection
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: Query string. Supported fields are url, type\
            \ (urlquery/prefixquery), offset and limit.
          example: "url:https://www.example.org/ type:urlquery limit:100"
          schema:
            type: string
        - name: count
          in: query
          description: .
          schema:
            type: integer
        - name: start_page
          in: query
          description: .
          schema:
            type: integer
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          schema:
            type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The OpenWayback CDX records of the URL in the collection
          content:
            application/xml:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection/URL not found
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cdx/pywb/{collectionid}:
    get:
      summary: Get PyWayback CDX records
      description: Get the PyWayback CDX records of a URL in a collection
      operationId: getCdxPywb
      tags:
        - wayback
      responses:
        '200':
          description: The PyWayback CDX records of the URL in the collection
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection/URL not found
        '500':
          description: Internal Server Error
      parameters:
        - name: 'collectionid'
          in: path
          description: Identifier of the collection
          required: true
          schema:
            type: string
        - name: url
          in: query
          description: The URL for which the CDX records are requested
          schema:
            type: string
        - name: limit
          in: query
          description: .
          schema:
            type: integer
        - name: matchType
          in: query
          schema:
            type: string
            enum: ["exact", "prefix", "host", "domain", "range"]
        - name: sort
          in: query
          schema:
            type: string
            enum: ["default", "closest", "reverse"]
        - name: closest
          in: query
          description: Timestamp for sort=closest mode
          schema:
            type: string
          example: 20030402172120
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: ["cdx", "json"]
        - name: fl
          in: query
          description: Comma-separated list of fields to include in output
          schema:
            type: string
          example: urlkey,timestamp,original,mimetype,statuscode,digest,length,\
            \offset,filename
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          schema:
            type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          schema:
            type: string
  /warcs/{fileName}:
    get:
      summary: Get a WARC archive
      description: Get the contents of a single WARC record as a WARC archive
      operationId: getWarcArchive
      tags:
        - wayback
      parameters:
        - name: 'fileName'
          in: path
          description: Name of the WARC archive
          required: true
          schema:
            type: string
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          schema:
            type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          schema:
            type: string
        - name: 'Range'
          in: header
          description: The Range header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The contents of the requested WARC archive
          content:
            application/warc:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: WARC archive not found
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /checksumalgorithms:
    get:
      summary: "Get the supported checksum algorithms"
      description: "Get a list of the names of the supported checksum algorithms"
      operationId: getSupportedChecksumAlgorithms
      tags:
        - import
      responses:
        200:
          description: "The names of the supported checksum algorithms"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  '/repoinfo':
    get:
      tags:
        - repo
      summary: Get repository information
      description: Get properties of the repository
      operationId: getRepositoryInformation
      responses:
        '200':
          description: The repository information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryInfo"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

components:
  schemas:
    ApiStatus:
      type: "object"
      required:
        - "apiVersion"
        - "componentName"
        - "componentVersion"
        - "lockssVersion"
        - "ready"
        - "serviceName"
      properties:
        apiVersion:
          type: "string"
          description: "The version of the API"
        componentName:
          type: "string"
          description: "The name of the component"
        componentVersion:
          type: "string"
          description: "The version of the component software"
        lockssVersion:
          type: "string"
          description: "The version of the LOCKSS system"
        ready:
          type: "boolean"
          description: "The indication of whether the service is available"
        serviceName:
          type: "string"
          description: "The name of the service"
      description: "The status information of the service"
    ArtifactIdentifier:
      type: object
      properties:
        id:
          type: string
        collection:
          type: string
        auid:
          type: string
        uri:
          type: string
        version:
          type: integer
    Artifact:
      type: object
#      allOf:
#        - $ref: '#/components/schemas/ArtifactIdentifier'
      properties:
        id:
          type: string
        collection:
          type: string
        auid:
          type: string
        uri:
          type: string
        version:
          type: integer
        committed:
          type: "boolean"
        storageUrl:
          type: "string"
        contentLength:
          type: "integer"
          format: int64
        contentDigest:
          type: "string"
        contentType:
          type: "string"
        collectionDate:
          type: "integer"
          format: "int64"
        properties:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    ArtifactData:
      type: object
      allOf:
#        - $ref: '#/components/schemas/ArtifactIdentifier'
        - $ref: '#/components/schemas/Artifact'
      properties:
        storedDate:
          type: "integer"
          format: "int64"
        data:
          type: string
          format: binary
    ArtifactPageInfo:
      type: "object"
      required:
        - "artifacts"
        - "pageInfo"
      properties:
        artifacts:
          type: "array"
          description: "The artifacts included in the page"
          items:
            $ref: "#/components/schemas/Artifact"
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
      description: "A display page of artifacts"
    AuidPageInfo:
      type: "object"
      required:
        - "auids"
        - "pageInfo"
      properties:
        auids:
          type: "array"
          description: "The Archival Unit identifiers included in the page"
          items:
            type: "string"
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
      description: "A display page of Archival Unit identifiers"

    AuSize:
      type: "object"
      properties:
        totalLatestVersions:
          type: "integer"
          format: "int64"
        totalAllVersions:
          type: "integer"
          format: "int64"
        totalWarcSize:
          type: "integer"
          format: "int64"

    PageInfo:
      type: "object"
      required:
        - "totalCount"
        - "resultsPerPage"
        - "continuationToken"
        - "curLink"
        - "nextLink"
      properties:
        totalCount:
          type: "integer"
          format: "int32"
          description: "The total number of results"
        resultsPerPage:
          type: "integer"
          format: "int32"
          description: "The number of results per page"
        continuationToken:
          type: "string"
          description: "The continuation token"
        curLink:
          type: "string"
          description: "The link of the current request"
        nextLink:
          type: "string"
          description: "The link of the next request"
      description: "The information related to pagination of content"

    RepositoryInfo:
      type: "object"
      required:
        - "storeInfo"
        - "indexInfo"
      properties:
        storeInfo:
          $ref: "#/components/schemas/StorageInfo"
        indexInfo:
          $ref: "#/components/schemas/StorageInfo"
      description: "Information about the repository"

    StorageInfo:
      type: "object"
      required:
        - "type"
        - "name"
        - "size"
        - "used"
        - "avail"
        - "percentUsedString"
        - "percentUsed"
      properties:
        type:
          description: "Type of the storage area"
          type: "string"
        name:
          description: "Name of the storage area"
          type: "string"
        size:
          description: "Size in bytes of the storage area"
          type: "integer"
          format: "int64"
        used:
          description: "Used size in bytes of the torage area"
          type: "integer"
          format: "int64"
        avail:
          description: "Available size in bytes of the storage area"
          type: "integer"
          format: "int64"
        percentUsedString:
          description: "Percentage of size used, formatted as a string"
          type: "string"
        percentUsed:
          description: "Percentage of size used"
          type: "number"
          format: "double"
      description: "Information about a repository storage area"


    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string