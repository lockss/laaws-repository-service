# Copyright (c) 2000-2020, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

swagger: "2.0"
info:
  title: "LOCKSS Repository Service REST API"
  version: "2.0.0"
  description: "REST API of the LOCKSS Repository Service"
  contact:
    name: "LOCKSS Support"
    url: "https://www.lockss.org/"
    email: "lockss-support@lockss.org"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"
host: "laaws.lockss.org:443"
basePath: "/"
tags:
  - name: Default
    description: Default section
  - name: repository
    description: Tasks on the repository
schemes:
- "http"
produces:
- "application/json"
paths:
  /namespaces:
    get:
      tags:
        - repo
      summary: "Get namespaces of the committed artifacts in the repository"
      operationId: getNamespaces
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              type: "string"
  /archives:
    post:
      tags:
        - artifacts
      summary: "Imports artifacts from an archive"
      operationId: addArtifacts
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "query"
          type: "string"
          required: false
          default: "lockss"
        - name: "auid"
          in: "formData"
          required: true
          type: "string"
          description: "Archival Unit ID (AUID) of new artifact"
        - name: "archive"
          in: "formData"
          required: true
          type: "file"
          description: "Archive data containing artifacts"
      responses:
        200:
          description: "Status of artifacts imported from the archive, maybe partially. Return body is a sequence of 
          JSON ImportStatus objects."
          schema:
            type: file
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to create artifacts"
        502:
          description: "Internal error creating artifact"
  /artifacts:
    get:
      tags:
        - artifacts
      summary: "Returns all artifacts that match a given a URL or URL prefix and/or version."
      operationId: getArtifactsFromAllAus
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "query"
          type: "string"
          required: false
          default: "lockss"
        - name: "url"
          in: "query"
          required: false
          type: "string"
          description: "The URL contained by the artifacts"
        - name: "urlPrefix"
          in: "query"
          required: false
          type: "string"
          description: "The prefix to be matched by the artifact URLs"
        - name: "versions"
          in: "query"
          description: "Versions of the artifacts to return"
          type: string
          enum:
            - all
            - latest
          default: all
        - name: "limit"
          in: "query"
          description: "The requested maximum number of artifacts per response"
          required: false
          type: "integer"
        - name: "continuationToken"
          in: "query"
          required: false
          type: "string"
          description: "The continuation token of the next page of artifacts to\
          \ be returned"
      responses:
        200:
          description: "The requested artifacts"
          schema:
            $ref: '#/definitions/artifactPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "Collection not found"
        502:
          description: "Could not read from external resource"
    post:
      tags:
        - artifacts
      summary: "Create an artifact"
      operationId: createArtifact
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "artifactProps"
        in: "formData"
        required: true
        type: "string"
        description: "Artifact properties (JSON)"
      - name: "httpResponseHeader"
        in: "formData"
        required: false
        type: "string"
        description: "HTTP response status and headers (optional)"
      - name: "payload"
        in: "formData"
        required: true
        type: "file"
        description: "Artifact payload data"
      responses:
        201:
          description: "Artifact created"
          schema:
            $ref: "#/definitions/artifact"
        302:
          description: "Duplicate content; artifact not created"
          headers:
            Location:
              type: "string"
              description: "Repository query URL to duplicate artifacts"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to create artifacts"
        502:
          description: "Internal error creating artifact"
  /artifacts/{uuid}:
    parameters:
      - name: "namespace"
        description: "Namespace of the artifacts"
        in: "query"
        type: "string"
        required: false
        default: "lockss"
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
        description: "Identifier of the artifact"
    get:
      tags:
        - artifacts
      summary: "Get artifact and metadata"
      operationId: getArtifactDataByMultipart
      parameters:
        - name: "includeContent"
          in: "query"
          type: "string"
          enum: [ "NEVER", "IF_SMALL", "ALWAYS" ]
          description: "Controls whether to include the artifact content part in multipart response"
          required: false
          default: "ALWAYS"
      produces:
        - "multipart/form-data"
        - "application/json"
      responses:
        200:
          description: "Multipart/form-data containing the following parts: The artifact properties, HTTP 
            status and headers if present, and the artifact's payload if requested. See POST /artifacts for 
            more information."
          schema:
            type: file
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve artifact"
        404:
          description: "Artifact not found"
        500:
          description: "Internal Server Error"
        502:
          description: "Could not read from external resource"
    put:
      tags:
        - artifacts
      summary: "Update the property of an artifact"
      operationId: updateArtifact
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "committed"
          in: "formData"
          required: true
          type: "boolean"
          description: "New commit status of artifact"
      responses:
        200:
          description: "Artifact updated"
          schema:
            $ref: "#/definitions/artifact"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to update artifact"
        404:
          description: "Artifact not found"
    delete:
      tags:
        - artifacts
      summary: "Remove an artifact from the repository"
      operationId: deleteArtifact
      consumes:
        - "application/json"
      parameters: [ ]
      responses:
        200:
          description: "Successfully removed artifact"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to delete artifact"
        404:
          description: "Artifact not found"
        409:
          description: "Cannot delete artifact"
  /artifacts/{uuid}/payload:
    parameters:
      - name: "namespace"
        description: "Namespace of the artifacts"
        in: "query"
        type: "string"
        required: false
        default: "lockss"
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
        description: "Identifier of the artifact"
    get:
      tags:
        - artifacts
      summary: "Get artifact payload"
      operationId: getArtifactDataByPayload
      parameters:
        - name: "includeContent"
          in: "query"
          type: "string"
          enum: [ "NEVER", "IF_SMALL", "ALWAYS" ]
          description: "Controls whether to include the artifact content part in multipart response"
          required: false
          default: "ALWAYS"
      produces:
        - "application/octet-stream"
      responses:
        200:
          description: "Artifact's payload"
          schema:
            type: file
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve artifact"
        404:
          description: "Artifact not found"
        500:
          description: "Internal Server Error"
        502:
          description: "Could not read artifact"
  /artifacts/{uuid}/response:
    parameters:
      - name: "namespace"
        description: "Namespace of the artifacts"
        in: "query"
        type: "string"
        required: false
        default: "lockss"
      - name: "uuid"
        in: "path"
        required: true
        type: "string"
        description: "Identifier of the artifact"
    get:
      tags:
        - artifacts
      summary: "Get artifact data as HTTP response"
      operationId: getArtifactDataByResponse
      parameters:
        - name: "includeContent"
          in: "query"
          type: "string"
          enum: [ "NEVER", "IF_SMALL", "ALWAYS" ]
          description: "Controls whether to include the artifact content part in multipart response"
          required: false
          default: "ALWAYS"
      produces:
        - "application/http;msgtype=response"
      responses:
        200:
          description: "Artifact's payload"
          schema:
            type: file
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve artifact"
        404:
          description: "Artifact not found"
        500:
          description: "Internal Server Error"
        502:
          description: "Could not read artifact"
  /aus:
    get:
      tags:
        - aus
      summary: "Get Archival Unit IDs (AUIDs) in a namespace"
      description: "Get a list of all Archival Unit identifiers in a namespace\
        \ or a pageful of the list defined by the continuation token and size"
      operationId: getAus
      responses:
        200:
          description: "The requested Archival Unit identifiers"
          schema:
            $ref: '#/definitions/auidPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "No AUIDs in namespace"
        502:
          description: "Could not read from external resource"
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "query"
          type: "string"
          required: false
          default: "lockss"
        - name: "limit"
          in: "query"
          description: "The requested maximum number of Archival Unit\
            \ identifiers per response"
          required: false
          type: "integer"
        - name: "continuationToken"
          in: "query"
          required: false
          type: "string"
          description: "The continuation token of the next page of Archival\
            \ Unit identifiers to be returned"
  /aus/{auid}/bulk:
    post:
      tags:
        - aus
      summary: "Marks the AUID for bulk artifact transfer"
      description: ""
      operationId: handleBulkAuOp
      responses:
        200:
          description: "Bulk operation succeeded"
        401:
          description: "Unauthorized"
        403:
          description: "Client is forbidden from performing bulk operation"
        404:
          description: "AUID not in bulk mode"
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "query"
          type: "string"
          required: false
          default: "lockss"
        - name: "auid"
          in: "path"
          required: true
          type: "string"
          description: "Archival Unit ID"
        - name: "op"
          description: "Bulk AU transfer operation"
          in: "formData"
          required: true
          type: string
          enum: ["start", "finish"]
  /aus/{auid}/artifacts:
    get:
      tags:
        - artifacts
      summary: "Get artifacts in an Archival Unit"
      description: "Get a list of all artifacts in a namespace and Archival\
        \ Unit or a pageful of the list defined by the continuation token and\
        \ size"
      operationId: getArtifacts
      responses:
        200:
          description: "The requested artifacts"
          schema:
            $ref: '#/definitions/artifactPageInfo'
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "AUID not found in namespace"
        502:
          description: "Could not read from external resource"
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "query"
          type: "string"
          required: false
          default: "lockss"
        - name: "auid"
          in: "path"
          required: true
          type: "string"
          description: "Identifier of the Archival Unit containing the\
            \ artifacts"
        - name: "url"
          in: "query"
          required: false
          type: "string"
          description: "The URL contained by the artifacts"
        - name: "urlPrefix"
          in: "query"
          required: false
          type: "string"
          description: "The prefix to be matched by the artifact URLs"
        - name: "version"
          in: "query"
          required: false
          type: "string"
          description: "The version of the artifact"
        - name: "includeUncommitted"
          in: "query"
          required: false
          type: "boolean"
          description: "Indication of whether uncommitted artifacts should be\
            \ returned"
        - name: "limit"
          in: "query"
          description: "The requested maximum number of artifacts per response"
          required: false
          type: "integer"
        - name: "continuationToken"
          in: "query"
          required: false
          type: "string"
          description: "The continuation token of the next page of artifacts to\
            \ be returned"
  /aus/{auid}/size:
    get:
      tags:
        - aus
      summary: "Get the size of Archival Unit artifacts in a namespace"
      operationId: getArtifactsSize
      parameters:
      - name: "namespace"
        description: "Namespace of the artifacts"
        in: "query"
        type: "string"
        required: false
        default: "lockss"
      - name: "auid"
        in: "path"
        required: true
        type: "string"
        description: "Identifier of the Archival Unit containing the artifacts"
      responses:
        200:
          description: "Returns an AuSize containing the sizes of all the artifacts, only the latest artifact \
          version of all URLs, and the sum of the size of all the underlying WARC files, of an AU."
          schema:
            $ref: "#/definitions/auSize"
        401:
          description: "Unauthorized request"
        403:
          description: "Client not authorized to retrieve data"
        404:
          description: "AUID not found in namespace"
        502:
          description: "Could not read from external resource"
  /status:
    get:
      tags:
        - "status"
      summary: "Get the status of the service"
      description: "Get the status of the service"
      operationId: "getStatus"
      produces:
        - "application/json"
      responses:
        200:
          description: "The status of the service"
          schema:
            $ref: "#/definitions/apiStatus"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
  /wayback/cdx/owb/{namespace}:
    get:
      tags:
        - wayback
      summary: Get OpenWayback CDX records
      description: Get the OpenWayback CDX records of a URL in a namespace
      operationId: getCdxOwb
      produces:
        - "application/xml"
      responses:
        '200':
          description: The OpenWayback CDX records of the URL in the namespace
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Namespace/URL not found
        '500':
          description: Internal Server Error
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "path"
          type: "string"
          required: true
          default: "lockss"
        - name: q
          in: query
          description: Query string. Supported fields are url, type\
            \ (urlquery/prefixquery), offset and limit.
          example: url:http://www.example.org/ type:urlquery limit:100
          type: string
        - name: count
          in: query
          description: .
          type: integer
        - name: start_page
          in: query
          description: .
          type: integer
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          type: string
  /wayback/cdx/pywb/{namespace}:
    get:
      tags:
        - wayback
      summary: Get PyWayback CDX records
      description: Get the PyWayback CDX records of a URL in a namespace
      operationId: getCdxPywb
      produces:
        - "text/plain"
      responses:
        '200':
          description: The PyWayback CDX records of the URL in the namespace
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Namespace/URL not found
        '500':
          description: Internal Server Error
      parameters:
        - name: "namespace"
          description: "Namespace of the artifacts"
          in: "path"
          type: "string"
          required: true
          default: "lockss"
        - name: url
          in: query
          description: The URL for which the CDX records are requested
          type: string
        - name: limit
          in: query
          description: .
          type: integer
        - name: matchType
          in: query
          type: string
          enum: ["exact", "prefix", "host", "domain", "range"]
        - name: sort
          in: query
          type: string
          enum: ["default", "closest", "reverse"]
        - name: closest
          in: query
          description: Timestamp for sort=closest mode
          type: string
          example: 20030402172120
        - name: output
          in: query
          description: Output format
          type: string
          enum: ["cdx", "json"]
        - name: fl
          in: query
          description: Comma-separated list of fields to include in output
          type: string
          example: urlkey,timestamp,original,mimetype,statuscode,digest,length,\
            \offset,filename
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          type: string
  /wayback/warcs/{fileName}:
    get:
      tags:
        - wayback
      summary: Get a WARC archive
      description: Get the contents of a single WARC record as a WARC archive
      operationId: getWarcArchive
      produces:
        - "application/warc"
      responses:
        '200':
          description: The contents of the requested WARC archive
          schema:
            type: file
        '401':
          description: Unauthorized
        '404':
          description: WARC archive not found
        '500':
          description: Internal Server Error
      parameters:
        - name: 'fileName'
          in: path
          description: Name of the WARC archive
          required: true
          type: string
        - name: 'Accept'
          in: header
          description: The Accept header
          required: false
          type: string
        - name: 'Accept-Encoding'
          in: header
          description: The Accept-Encoding header
          required: false
          type: string
        - name: 'Range'
          in: header
          description: The Range header
          required: false
          type: string
  '/checksumalgorithms':
    get:
      tags:
        - repo
      summary: Get the supported checksum algorithms
      description: Get a list of the names of the supported checksum algorithms
      operationId: getSupportedChecksumAlgorithms
      produces:
        - application/json
      responses:
        '200':
          description: The names of the supported checksum algorithms
          schema:
            type: array
            items:
              type: "string"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  '/repoinfo':
    get:
      tags:
        - repo
      summary: Get repository information
      description: Get properties of the repository
      operationId: getRepositoryInformation
      produces:
        - application/json
      responses:
        '200':
          description: The repository information
          schema:
            $ref: "#/definitions/repositoryInfo"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  '/repoinfo/storage':
    get:
      tags:
        - repo
      summary: Get repository storage information
      description: Get properties of the repository storage
      operationId: getStorageInfo
      produces:
        - application/json
      responses:
        '200':
          description: The repository storage information
          schema:
            $ref: "#/definitions/storageInfo"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
definitions:
  importStatus:
    type: "object"
    properties:
      warcId:
        type: "string"
      offset:
        type: "integer"
        format: "int64"
      url:
        type: "string"
      artifactUuid:
        type: "string"
      digest:
        type: "string"
      version:
        type: "integer"
      status:
        type: "string"
        enum:
          - "OK"
          - "ERROR"
      statusMessage:
        type: "string"
  artifactPageInfo:
    type: "object"
    required:
      - "artifacts"
      - "pageInfo"
    properties:
      artifacts:
        type: "array"
        description: "The artifacts included in the page"
        items:
          $ref: "#/definitions/artifact"
      pageInfo:
        $ref: "#/definitions/pageInfo"
    description: "A display page of artifacts"
  auSize:
    type: "object"
    properties:
      totalLatestVersions:
        type: "integer"
        format: "int64"
      totalAllVersions:
        type: "integer"
        format: "int64"
      totalWarcSize:
        type: "integer"
        format: "int64"
  artifactProperties:
    type: "object"
    properties:
      namespace:
        type: "string"
        default: "lockss"
      uuid:
        type: "string"
      auid:
        type: "string"
      uri:
        type: "string"
      version:
        type: "integer"
      contentLength:
        type: "integer"
        format: "int64"
      contentDigest:
        type: "string"
      collectionDate:
        type: "integer"
        format: "int64"
      state:
        type: "string"
  artifact:
    allOf:
      - $ref: '#/definitions/artifactProperties'
    type: "object"
    properties:
      committed:
        type: "boolean"
      storageUrl:
        type: "string"
  streamingResponseBody:
    type: "object"
  apiStatus:
    description: "The status information of the service"
    type: "object"
    required:
      - "apiVersion"
      - "ready"
    properties:
      apiVersion:
        type: "string"
        description: "The version of the API"
      componentName:
        type: "string"
        description: "The name of the component"
      componentVersion:
        type: "string"
        description: "The version of the component software"
      lockssVersion:
        type: "string"
        description: "The version of the LOCKSS system"
      ready:
        type: "boolean"
        description: "The indication of whether the service is available"
      serviceName:
        type: "string"
        description: "The name of the service"
      readyTime:
        type: "integer"
        format: "int64"
        description: "The time the service last became ready."
      reason:
        type: "string"
        description: "The reason the service isn't ready."
      startupStatus:
        description: "Enum indicating progress of plugin/AU processing at startup."
        type: string
        enum:
          - NONE
          - PLUGINS_CRAWLING
          - PLUGINS_COLLECTED
          - PLUGINS_LOADING
          - PLUGINS_LOADED
          - AUS_STARTING
          - AUS_STARTED
  auidPageInfo:
    type: "object"
    required:
      - "auids"
      - "pageInfo"
    properties:
      auids:
        type: "array"
        description: "The Archival Unit identifiers included in the page"
        items:
          type: "string"
      pageInfo:
        $ref: "#/definitions/pageInfo"
    description: "A display page of Archival Unit identifiers"
  pageInfo:
    type: "object"
    required:
      - "totalCount"
      - "resultsPerPage"
      - "continuationToken"
      - "curLink"
      - "nextLink"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
        description: "The total number of results"
      resultsPerPage:
        type: "integer"
        format: "int32"
        description: "The number of results per page"
      continuationToken:
        type: "string"
        description: "The continuation token"
      curLink:
        type: "string"
        description: "The link of the current request"
      nextLink:
        type: "string"
        description: "The link of the next request"
    description: "The information related to pagination of content"
  repositoryInfo:
    type: "object"
    required:
      - "storeInfo"
      - "indexInfo"
    properties:
      storeInfo:
        description: "Information about the repository store"
        $ref: "#/definitions/storageInfo"
      indexInfo:
        description: "Information about the repository index"
        $ref: "#/definitions/storageInfo"
    description: "Information about the repository"
  storageInfo:
    type: "object"
    required:
      - "type"
      - "name"
      - "size"
      - "used"
      - "avail"
      - "percentUsedString"
      - "percentUsed"
    properties:
      type:
        description: "Type of the storage area"
        type: "string"
      name:
        description: "Name of the storage area"
        type: "string"
      size:
        description: "Size in bytes of the storage area"
        type: "integer"
        format: "int64"
      used:
        description: "Used size in bytes of the torage area"
        type: "integer"
        format: "int64"
      avail:
        description: "Available size in bytes of the storage area"
        type: "integer"
        format: "int64"
      percentUsedString:
        description: "Percentage of size used, formatted as a string"
        type: "string"
      percentUsed:
        description: "Percentage of size used"
        type: "number"
        format: "double"
    description: "Information about a repository storage area"
