/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lockss.laaws.rs.api;

import org.lockss.laaws.rs.model.Artifact;
import org.springframework.core.io.Resource;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "collections", description = "the collections API")
public interface CollectionsApi {

    Logger log = LoggerFactory.getLogger(CollectionsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Remove an artifact from the repository", nickname = "collectionsCollectionidArtifactsArtifactidDelete", notes = "", tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully removed artifact"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to delete artifact"),
        @ApiResponse(code = 404, message = "Artifact not found"),
        @ApiResponse(code = 409, message = "Cannot delete committed artifact") })
    @RequestMapping(value = "/collections/{collectionid}/artifacts/{artifactid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> collectionsCollectionidArtifactsArtifactidDelete(@ApiParam(value = "Collection containing the artifact",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Identifier of the artifact",required=true) @PathVariable("artifactid") String artifactid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get artifact content and metadata", nickname = "collectionsCollectionidArtifactsArtifactidGet", notes = "", response = StreamingResponseBody.class, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Artifact created", response = StreamingResponseBody.class),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to retrieve artifact"),
        @ApiResponse(code = 404, message = "Artifact not found"),
        @ApiResponse(code = 502, message = "Could not read from external resource") })
    @RequestMapping(value = "/collections/{collectionid}/artifacts/{artifactid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<StreamingResponseBody> collectionsCollectionidArtifactsArtifactidGet(@ApiParam(value = "Collection containing the artifact",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Identifier of the artifact",required=true) @PathVariable("artifactid") String artifactid,@ApiParam(value = "Content type to return" , allowableValues="application/http, application/warc, multipart/related", defaultValue="multipart/related") @RequestHeader(value="Accept", required=false) String accept) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", StreamingResponseBody.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update the committed property of an artifact", nickname = "collectionsCollectionidArtifactsArtifactidPut", notes = "", response = Artifact.class, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Artifact updated", response = Artifact.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to update artifact"),
        @ApiResponse(code = 404, message = "Artifact not found") })
    @RequestMapping(value = "/collections/{collectionid}/artifacts/{artifactid}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<Artifact> collectionsCollectionidArtifactsArtifactidPut(@ApiParam(value = "Collection containing the artifact",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Identifier of the artifact",required=true) @PathVariable("artifactid") String artifactid,@ApiParam(value = "New commit status of artifact") @RequestParam(value="committed", required=false)  Boolean committed) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"auid\" : \"auid\",  \"committed\" : true,  \"id\" : \"id\",  \"collection\" : \"collection\",  \"uri\" : \"uri\",  \"version\" : 0,  \"storageUrl\" : \"storageUrl\"}", Artifact.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Create an artifact", nickname = "collectionsCollectionidArtifactsPost", notes = "", response = Artifact.class, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Artifact created", response = Artifact.class),
        @ApiResponse(code = 302, message = "Duplicate content; artifact not created"),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to create artifacts"),
        @ApiResponse(code = 502, message = "Internal error creating artifact") })
    @RequestMapping(value = "/collections/{collectionid}/artifacts",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<Artifact> collectionsCollectionidArtifactsPost(@ApiParam(value = "Collection containing the artifact",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Archival Unit ID (AUID) of new artifact", required=true) @RequestParam(value="auid", required=true)  String auid,@ApiParam(value = "URI represented by this artifact", required=true) @RequestParam(value="uri", required=true)  String uri,@ApiParam(value = "file detail") @Valid @RequestPart("content") MultipartFile content,@ApiParam(value = "file detail") @Valid @RequestPart("aspectsParts") MultipartFile... aspectParts) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"auid\" : \"auid\",  \"committed\" : true,  \"id\" : \"id\",  \"collection\" : \"collection\",  \"uri\" : \"uri\",  \"storageUrl\" : \"storageUrl\"}", Artifact.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get committed artifacts in a collection and Archival Unit", nickname = "collectionsCollectionidAusAuidArtifactsGet", notes = "", response = Artifact.class, responseContainer = "List", tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested artifacts", response = Artifact.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to retrieve data"),
        @ApiResponse(code = 404, message = "Collection not found"),
        @ApiResponse(code = 502, message = "Could not read from external resource") })
    @RequestMapping(value = "/collections/{collectionid}/aus/{auid}/artifacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Artifact>> collectionsCollectionidAusAuidArtifactsGet(@ApiParam(value = "Identifier of the collection containing the artifacts",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Identifier of the Archival Unit containing the artifacts",required=true) @PathVariable("auid") String auid,@ApiParam(value = "The URL contained by the artifacts") @Valid @RequestParam(value = "url", required = false) String url,@ApiParam(value = "The prefix to be matched by the artifact URLs") @Valid @RequestParam(value = "urlPrefix", required = false) String urlPrefix,@ApiParam(value = "The version of the URL contained by the artifacts") @Valid @RequestParam(value = "version", required = false) String version) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"auid\" : \"auid\",  \"committed\" : true,  \"id\" : \"id\",  \"collection\" : \"collection\",  \"uri\" : \"uri\",  \"version\" : 0,  \"storageUrl\" : \"storageUrl\"}, {  \"auid\" : \"auid\",  \"committed\" : true,  \"id\" : \"id\",  \"collection\" : \"collection\",  \"uri\" : \"uri\",  \"version\" : 0,  \"storageUrl\" : \"storageUrl\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get the size of Archival Unit artifacts in a collection", nickname = "collectionsCollectionidAusAuidSizeGet", notes = "", response = Long.class, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The size of the artifacts", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to retrieve data"),
        @ApiResponse(code = 404, message = "Collection not found"),
        @ApiResponse(code = 502, message = "Could not read from external resource") })
    @RequestMapping(value = "/collections/{collectionid}/aus/{auid}/size",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Long> collectionsCollectionidAusAuidSizeGet(@ApiParam(value = "Identifier of the collection containing the artifacts",required=true) @PathVariable("collectionid") String collectionid,@ApiParam(value = "Identifier of the Archival Unit containing the artifacts",required=true) @PathVariable("auid") String auid,@ApiParam(value = "The URL contained by the artifacts") @Valid @RequestParam(value = "url", required = false) String url,@ApiParam(value = "The prefix to be matched by the artifact URLs") @Valid @RequestParam(value = "urlPrefix", required = false) String urlPrefix,@ApiParam(value = "The version of the URL contained by the artifacts") @Valid @RequestParam(value = "version", required = false) String version) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("0", Long.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get Archival Unit IDs (AUIDs) in a collection", nickname = "collectionsCollectionidAusGet", notes = "", response = String.class, responseContainer = "List", tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 403, message = "Client not authorized to retrieve data"),
        @ApiResponse(code = 404, message = "Collection not found"),
        @ApiResponse(code = 502, message = "Could not read from external resource") })
    @RequestMapping(value = "/collections/{collectionid}/aus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> collectionsCollectionidAusGet(@ApiParam(value = "Identifier of the collection containing the Archival Units",required=true) @PathVariable("collectionid") String collectionid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ \"\", \"\" ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get collection identifiers of the committed artifacts in the repository", nickname = "collectionsGet", notes = "", response = String.class, responseContainer = "List", tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/collections",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> collectionsGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ \"\", \"\" ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CollectionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
