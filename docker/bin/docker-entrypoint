#!/bin/sh

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

_0="$(basename "${0}")"

JVM_OPTS_DOCKER='-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap'
JVM_OPTS_LOGGING='-Dorg.lockss.defaultLogLevel=debug -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dorg.springframework.boot.logging.LoggingSystem=none'
JVM_OPTS_TMP="-Djava.io.tmpdir=${LOCKSS_TMP}"
LOCKSS_JAR="${LOCKSS_HOME}/lib/lockss.jar"
STARTUP_FILE="${LOCKSS_PIDS}/lockss.startup"
PID_FILE="${LOCKSS_PIDS}/lockss.pid"

# $1=exitcode
Exit()
{
  rm -f "${STARTUP_FILE}"
  exit "${1}"
}

# $1=srcdir
Apply_Config()
{
  if [ -d "${1}" ]; then
    : \
    && TMP=$(mktemp -d) \
    && cd "${TMP}" \
    && ( cd "${1}" && tar cf - . ) | tar xf - \
    && for f in $(find . -type f -name '*.tpl'); do
         envsubst < "${f}" > "$(dirname "${f}")/$(basename "${f}" '.tpl')"
       done \
    && cd "${LOCKSS_HOME}/etc" \
    && ( cd "${TMP}" && tar cf - --exclude '*.tpl' . ) | tar xf -
    RET=$?
    rm -rf "${TMP}"
    return $RET
  else
    return 0
  fi
}

# $1=dir
Check_Dir()
{
  if [ ! -d "${1}" ]; then
    echo "${_0}: directory not found: ${1}"
    Exit 1
  fi
}

# $1=command
Check_Executable()
{
  if ! which "${1}" > /dev/null 2>&1 ; then
    echo "${_0}: PATH executable not found: ${1}"
    Exit 1
  fi
}

# $1=file
Check_File()
{
  if [ ! -f "${1}" ]; then
    echo "${_0}: file not found: ${1}"
    Exit 1
  fi
}

# $1=string $2=name
Check_Set()
{
  if [ -z "${1}" ]; then
    echo "${_0}: environment variable not set: ${2}"
    Exit 1
  fi
}

# $1=space separated string of host:port pairs
Wait_For_Port()
{
  echo " * Waiting for: $@"
  for hostport in $@ ; do
    echo " * Waiting for ${hostport} since $(date)"
    host="${hostport%%:*}"
    port="${hostport#*:}"
    until nc -z -w "${LOCKSS_WAIT_FOR_PORT_TIMEOUT}" "${host}" "${port}" ; do
      sleep "${LOCKSS_WAIT_FOR_PORT_SLEEP}"
    done
    echo " * ...done at $(date)"
  done
  echo " * ...done"  
}

# Beginning

echo "$$" > "${STARTUP_FILE}"
rm -f "${PID_FILE}"
echo " * Beginning execution with ${LOCKSS_MAVEN_GROUP}:${LOCKSS_MAVEN_ARTIFACT}:${LOCKSS_MAVEN_VERSION}"

# Sanity checks

echo " * Sanity checks..."

Check_Executable 'envsubst'
Check_Executable 'java'
Check_Executable 'nc'

Check_Set "${LOCKSS_LOGS}" LOCKSS_LOGS
Check_Dir "${LOCKSS_LOGS}"
Check_Set "${LOCKSS_DATA}" LOCKSS_DATA
Check_Dir "${LOCKSS_DATA}"
Check_Set "${LOCKSS_PIDS}" LOCKSS_PIDS
Check_Dir "${LOCKSS_PIDS}"

Check_Set "${LOCKSS_HOME}" LOCKSS_HOME
Check_Dir "${LOCKSS_HOME}"
Check_Set "${LOCKSS_JAR}" LOCKSS_JAR
Check_File "${LOCKSS_JAR}"

Check_Set "${LOCKSS_TMP}" LOCKSS_TMP

Check_Set "${LOCKSS_JMS_HOST}" LOCKSS_JMS_HOST
Check_Set "${LOCKSS_JMS_PORT}" LOCKSS_JMS_PORT

Check_Set "${LOCKSS_HDFS_HOST}" LOCKSS_HDFS_HOST
Check_Set "${LOCKSS_HDFS_PORT}" LOCKSS_HDFS_PORT
Check_Set "${LOCKSS_SOLR_HOST}" LOCKSS_SOLR_HOST
Check_Set "${LOCKSS_SOLR_PORT}" LOCKSS_SOLR_PORT

# Layer configuration

echo " * Layering configuration..."

mkdir -p "${LOCKSS_HOME}/etc"
Apply_Config "${LOCKSS_HOME}/etc.base"

# Sequencing

if [ -n "${LOCKSS_WAIT_FOR_PORT}" ]; then
  Wait_For_Port "${LOCKSS_WAIT_FOR_PORT}"
fi

# Temp directory handling

echo " * Temporary directory handling..."
OLDTMP="$(mktemp -d -p "${LOCKSS_DATA}")"
mv "${LOCKSS_TMP}" "${OLDTMP}"
mkdir -p "${LOCKSS_TMP}"
( cd "${OLDTMP}" && rm -rf * && rmdir "${OLDTMP}" ) &

export LOG4J_LOCKSS_CONFIG="${LOCKSS_HOME}/etc/log4j2-lockss-container.xml"

# Invoke JVM

echo " * Launching service..."
echo "$$" > "${PID_FILE}"
rm -f "${STARTUP_FILE}"
exec java ${JVM_OPTS_DOCKER} \
          ${JVM_OPTS_LOGGING} \
          ${JVM_OPTS_TMP} \
          "-Dorg.lockss.jmsUri=tcp://${LOCKSS_JMS_HOST}:${LOCKSS_JMS_PORT}" \
          -jar "${LOCKSS_JAR}" \
          "--spring.config.location=file:${CONFIGS}/lockss.properties"
